name: Backend CI

on:
  push:
    paths:
      - 'back-end/**'
  pull_request:
    paths:
      - 'back-end/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Build with Maven
        run: |
          cd back-end
          mvn clean install


  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Run Maven tests
        run: |
          cd back-end
          mvn test

  snyk:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth $SNYK_TOKEN

      - name: Run Snyk to check for vulnerabilities
        run: |
          cd back-end
          snyk test --severity-threshold=high || true

  deploy:
    needs: snyk
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # 仅在 main 分支上执行部署

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH client
        run: sudo apt-get install -y sshpass

      - name: Deploy to Remote Server
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # 将私钥添加到 SSH agent
          echo "$SSH_PRIVATE_KEY" > id_rsa
          chmod 600 id_rsa

          # SSH 连接并在远程服务器上执行命令
          ssh -i id_rsa -o StrictHostKeyChecking=no $SSH_USERNAME@$SSH_HOST << 'EOF'

           # 进入到部署的工作目录
          cd /home/SE5006/questify  # 使用服务器上项目的实际路径

          # 停止旧的容器
          docker-compose down

          # 使用 docker-compose 构建和启动新容器
          docker-compose up -d --build
          EOF